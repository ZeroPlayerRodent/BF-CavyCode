; This is the compiled version of "bf-interpreter.cavy".
(DEFUN PARSE-FLOAT (FOO)
 (LET ((STR "") (COUNTING 0) (COUNT 0))
  (LOOP FOR C ACROSS FOO DO (WHEN (= COUNTING 1) (SETF COUNT (+ COUNT 1))) DO (WHEN (NOT (EQUAL C #\.)) (SETF STR (CONCATENATE 'STRING STR (LIST C)))) DO (WHEN (EQUAL C #\.) (SETF COUNTING 1)))
  (IF (= COUNTING 1) (COERCE (* (PARSE-INTEGER STR) (EXPT 10 (- COUNT))) 'DOUBLE-FLOAT) (PARSE-INTEGER STR))))
(DEFVAR ACC 0)
(DEFVAR QI 0)
(DEFMACRO QUEUE () '(ELT QL QI))
(DEFVAR QL (LIST '(0)))
(DEFVAR CODE (LIST
(QUOTE (FORMAT T "Input BF program with '!' at the end: "))
(QUOTE 1)
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (NCONC (QUEUE) (LIST (CHAR-CODE (READ-CHAR T NIL (CODE-CHAR 0))))))
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 33) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 1 CODE :TEST #'EQUAL)))
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (POP (QUEUE)))
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (FORMAT T "Program loaded!"))
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (FORMAT T "Initializing memory, please wait..."))
(QUOTE (NCONC QL (LIST (LIST 0))))
(QUOTE (SETF QI 1))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 30000)))
(QUOTE 2)
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) 1)))
(QUOTE (NCONC (QUEUE) (LIST 0)))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 0) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 2 CODE :TEST #'EQUAL)))
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (FORMAT T "Memory intialized! Program starting."))
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (NCONC QL (LIST (LIST 0))))
(QUOTE 3)
(QUOTE (SETF QI 0))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 43) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 43 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 45) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 45 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 46) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 46 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 44) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 44 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 62) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 62 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 60) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 60 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 93) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 93 CODE :TEST #'EQUAL)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 91) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 91 CODE :TEST #'EQUAL)))
(QUOTE 4)
(QUOTE (NCONC (QUEUE) (LIST (ELT (QUEUE) 0))))
(QUOTE (POP (QUEUE)))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 33) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 3 CODE :TEST #'EQUAL)))
(QUOTE (SETF I (POSITION 5 CODE :TEST #'EQUAL)))
(QUOTE 43)
(QUOTE (SETF QI 1))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 1)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 256) (SETF I (+ I 1))))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) 256)))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 45)
(QUOTE (SETF QI 1))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) 1)))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) -1) (SETF I (+ I 1))))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 256)))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 46)
(QUOTE (SETF QI 1))
(QUOTE (FORMAT T "~c" (CODE-CHAR (ELT (QUEUE) 0))))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 44)
(QUOTE (SETF QI 1))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) (ELT (QUEUE) 0))))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) (CHAR-CODE (READ-CHAR T NIL (CODE-CHAR 0))))))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 62)
(QUOTE (SETF QI 1))
(QUOTE (NCONC (QUEUE) (LIST (ELT (QUEUE) 0))))
(QUOTE (POP (QUEUE)))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 60)
(QUOTE (SETF QI 1))
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (NCONC (QUEUE) (LIST (ELT (QUEUE) 0))))
(QUOTE (POP (QUEUE)))
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 93)
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 1)))
(QUOTE (SETF QI 1))
(QUOTE (UNLESS (= (ELT (QUEUE) 0) 0) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 100 CODE :TEST #'EQUAL)))
(QUOTE 101)
(QUOTE (SETF QI 0))
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (NCONC (QUEUE) (LIST (ELT (QUEUE) 0))))
(QUOTE (POP (QUEUE)))
(QUOTE (SETF (QUEUE) (REVERSE (QUEUE))))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 91) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION -1 CODE :TEST #'EQUAL)))
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) 1)))
(QUOTE (SETF QI 0))
(QUOTE -1)
(QUOTE (WHEN (= (ELT (QUEUE) 0) 93) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION -2 CODE :TEST #'EQUAL)))
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 1)))
(QUOTE (SETF QI 0))
(QUOTE -2)
(QUOTE (SETF QI 2))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 0) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 101 CODE :TEST #'EQUAL)))
(QUOTE 100)
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) (ELT (QUEUE) 0))))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 91)
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 1)))
(QUOTE (SETF QI 1))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 0) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 102 CODE :TEST #'EQUAL)))
(QUOTE 103)
(QUOTE (SETF QI 0))
(QUOTE (NCONC (QUEUE) (LIST (ELT (QUEUE) 0))))
(QUOTE (POP (QUEUE)))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 91) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION -3 CODE :TEST #'EQUAL)))
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (+ (ELT (QUEUE) 0) 1)))
(QUOTE (SETF QI 0))
(QUOTE -3)
(QUOTE (WHEN (= (ELT (QUEUE) 0) 93) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION -4 CODE :TEST #'EQUAL)))
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) 1)))
(QUOTE (SETF QI 0))
(QUOTE -4)
(QUOTE (SETF QI 2))
(QUOTE (WHEN (= (ELT (QUEUE) 0) 0) (SETF I (+ I 1))))
(QUOTE (SETF I (POSITION 103 CODE :TEST #'EQUAL)))
(QUOTE 102)
(QUOTE (SETF QI 2))
(QUOTE (SETF (ELT (QUEUE) 0) (- (ELT (QUEUE) 0) (ELT (QUEUE) 0))))
(QUOTE (SETF QI 0))
(QUOTE (SETF I (POSITION 4 CODE :TEST #'EQUAL)))
(QUOTE 5)
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (FORMAT T "~c" (CODE-CHAR 10)))
(QUOTE (FORMAT T "Program terminated."))
))(PROGN (DEFVAR I 0) (LOOP (WHEN (>= I (LENGTH CODE)) (RETURN)) (WHEN (EQUAL (QUEUE) 'NIL) (RETURN)) (EVAL (ELT CODE I)) (SETF I (+ I 1))))
